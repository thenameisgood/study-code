<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--引入SpringMVC的核心功能：主要引入了2个核心类型 RequestMappingHandleMapping  RequestMappingHandleAdapter
    RequestMappingHandleMapping:它会处理@RequestMapping注解，并将其注册到请求映射表中
    RequestMappingHandleAdapter:它会处理请求的适配器，确定调用某个符合要求的控制器类中的具体服务方法-->

    <!--     springMVC 扫描包下的controller -->
    <context:component-scan base-package="com.wang.controller"/>

    <!--    配置视图解析器 前后端不分离 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--    解决静态资源访问问题，如果不加，mvc:annotation-driven会导致无法访问handler
            该标签底层也是调用了DefaultServlet进行的静态资源处理:底层是通过DefaultServletHttpRequestHandler,以forward的形式调用的DefaultServlet
            request.getRequestDispatcher("default").forward(request,response)-->
    <mvc:default-servlet-handler/>
    <!--    这样也可以解决静态资源问题-->
    <!--    <mvc:resources mapping="/static/**" location="/static/"/>-->

    <!--    空控制器的解决-->
    <!--    <mvc:view-controller path="/index" view-name="index"/>-->

    <!--    自定义类型转换器-->
    <!--    <bean id="formattingConversionServiceFactoryBean"-->
    <!--          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
    <!--        <property name="converters">-->
    <!--            <set>-->
    <!--                <bean id="dateConverter" class="com.wang.common.DateConverter"/>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--    </bean>-->

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 配置Fastjson支持 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>WriteMapNullValue</value><!--是否输出值为null的字段,默认为false -->
                        <value>QuoteFieldNames</value><!--输出key时是否使用双引号,默认为true -->
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--    这样把自定义转换器放进去-->
    <!--    解决相应乱码-->
    <!--    <mvc:annotation-driven conversion-service="formattingConversionServiceFactoryBean">-->
    <!--        <mvc:message-converters>-->
    <!--            <bean class="org.springframework.http.converter.StringHttpMessageConverter">-->
    <!--                <constructor-arg value="utf-8"/>-->
    <!--            </bean>-->
    <!--        </mvc:message-converters>-->
    <!--    </mvc:annotation-driven>-->

    <!-- 配置文件上传解析器 id:必须是multipartResolver    必须要引入相关依赖：commons-fileupload commons-io-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 一次请求上传的文件的总大小的最大值，单位是字节-->
        <property name="maxUploadSize" value="10485760"/>
        <!-- 每个上传文件大小的最大值，单位是字节-->
        <property name="maxUploadSizePerFile" value="10485760"/>
    </bean>

    <!--    配置拦截器-->
<!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            &lt;!&ndash;配置排除拦截的路径&ndash;&gt;
            &lt;!&ndash;<mvc:exclude-mapping path="/"/>&ndash;&gt;
            &lt;!&ndash;配置拦截器对象注入容器&ndash;&gt;
            <bean class="com.wang.interceptor.MyHandlerInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>-->
</beans>